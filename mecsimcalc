import folium
import math


def main(inputs):
    soil_type = inputs['soil_type']
    k = inputs['hydraulic_conductivity']
    K = 'hydraulic_conductivity'

    print(soil_type)
    if soil_type == "Fine Sand":
        if k == 0:
            K = 2*10**-7
        if k == 0.5:
            K = (2*10**-4 + 2*10**-7)/2
        if k == 1:
            K = 2*10**-4
    if soil_type == "Medium Sand":
        if k == 0:
            K = 9*10**-7
        if k == 0.5:
            K = (5*10**-4 + 9*10**-7)/2
        if k == 1:
            K = 5*10**4
            """
    if soil_type == "Coarse Sand":
        if k == 0:
            K = 9*10**-7
        if k == 0.5:
            K = (6*10**-4 + 9*10**-7)/2
        if k == 1:
            K = 6*10**-4
            """
    if soil_type == "Gravelly Sand (Poorly Graded)":
        if k == 0:
            K = 2.55*10**-5
        if k == 0.5:
            K = (5.35*10**-4 + 2.55*10**-5)/2
        if k == 1:
            K = 5.35*10**-4
    if soil_type == "Gravelly Sand (Well Graded)":
        if k == 0:
            K = 1*10**-8
        if k == 0.5:
            K = (1*10**-6 + 1*10**-8)/2
        if k == 1:
            K = 1*10**-6
    if soil_type == "Silty Sand":
        if k == 0:
            K = 1*10**-8
        if k == 0.5:
            K = (5*10**-6 + 1*10**-8)/2
        if k == 1:
            K = 5*10**-6
            """
    if soil_type == "Clayey Sand":
        if k == 0:
            K = 5.5*10**-9
        if k == 0.5:
            K = (5.5*10**-6 + 5.5*10**-9)/2
        if k == 1:
            K = 5.5*10**-6
            """
    if soil_type == "Gravel":
        if k == 0:
            K = 3*10**-4
        if k == 0.5:
            K = (3*10**-4 + 3*10**-2)/2
        if k == 1:
            K = 3*10**-2
    if soil_type == "Silt (Compacted)":
        if k == 0:
            K = 7*10**-10
        if k == 0.5:
            K = (7*10**-10 + 7*10**-8)/2
        if k == 1:
            K = 7*10**-8
    if soil_type == "Clay":
        if k == 0:
            K = 1*10**-11
        if k == 0.5:
            K = (1*10**-11 + 4.7*10**-9)/2
        if k == 1:
            K = 4.7*10**-9

    # seepage velocity calculations
    i = inputs['hydraulic_gradient']
    ne = inputs['ne']
    vs = (K*i)/(ne)
    # length calculations
    lat1 = inputs['latitude_spill']
    lat2 = inputs['latitude_predict']
    lon1 = inputs['longtitude_spill']
    lon2 = inputs['longitude_predict']
    r = 6371
    p = math.pi / 180
    beta = 0.5 - math.cos((lat2-lat1)*p)/2 + math.cos(lat1*p) * math.cos(lat2*p) * (1-math.cos((lon2-lon1)*p))/2
    length = 2 * r * math.asin(math.sqrt(beta))
    L = length*1000
    # Hydronamic Dispersion
    D = (inputs['chemical_diffusion'])
    Dc = D*10**-9
    alphaL = 0.831*math.log(L, 10)**2.414
    DL = alphaL*vs+Dc
    # Retardation Factor
    Kd = inputs['distribution_coeff']
    ps = inputs['soil_bulk_density']
    R = 1+Kd*(ps/ne)
    # Time Calculations
    days = inputs['days']
    t = days*(86400)
    # Concentration Calculations
    c0 = inputs['initial_conc']
    erfc1 = (R*L-vs*t)/(2*math.sqrt(R*DL*t))
    erfc2 = (R*L+vs*t)/(2*math.sqrt(R*DL*t))
    erfc3 = math.exp((vs*L)/DL)
    C = (c0/2)*(math.erfc(erfc1)+erfc3*math.erfc(erfc2))
    # Time Required for BULK dissolved solvent to reach predicated location
    Vc = vs/R
    T_bulk_max = (L/Vc)/31556952
    T_bulk = inputs['bulk_time']*31556952
    D_bulk = Vc*T_bulk
    # Create a folium map
    m = folium.Map(location=[lat1, 360-lon1], zoom_start=15, tiles=inputs['map_tile'])

    # Add markers to map
    folium.Marker(
        [lat1, 360-lon1], popup="<i>Italic popup text</i>",
        tooltip="Click on Marker"
        ).add_to(m)
    folium.Marker(  # Marker with icon
        location=[lat2, 360-lon2],
        popup="<b>Bold popup text</b>",
        tooltip="Click on Marker",
        icon=folium.Icon(color=inputs['color'], icon="info-sign"),
    ).add_to(m)

    # Add line shape
    lat_lng_points = [[lat1, 360-lon1],
                      [lat2, 360-lon2]]
    folium.PolyLine(lat_lng_points,
                    color=inputs['color'],
                    tooltip="PolyLine",
                    weight=5,    # line thickness
                    opacity=0.8  # transparency
                    ).add_to(m)
    # Add oval shapes
    folium.Circle(
        radius=D_bulk,
        location=[lat1, 360-lon1],
        tooltip="Click on Circle",
        popup="Circle",
        color=inputs['color'],
        fill=False,
    ).add_to(m)
    # Export folium map as HTML string
    map_html = m._repr_html_()
    guide = inputs['guideline']
    if C < guide:
        msg = "Concentration is within acceptable range."
    if C >= guide:
        msg = "Concentration is not within acceptable range; remediation is required."
    return {"L": L, "t": t, "R": R, "vs": vs, "map": map_html, "C": C, "T_bulk_max": T_bulk_max, "c0": c0, "message": msg,}
