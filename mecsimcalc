import geopandas
import folium
import pandas as pd
import base64
import io
import math
import datetime

"""
def plt_show(plt, width=500, dpi=100):
    # Converts matplotlib plt to image data string
    #   plt is the matplotlib pyplot or figure
    #   width is the width of the graph image in pixels
    #   dpi (dots per inch) is the resolution of the image
    bytes = io.BytesIO()
    plt.savefig(bytes, format='png', dpi=dpi)  # Save as png image
    if hasattr(plt, "close"):
        plt.close()
    bytes.seek(0)
    base64_string = "data:image/png;base64," + \
        base64.b64encode(bytes.getvalue()).decode("utf-8")
    return "<img src='" + base64_string + "' width='" + str(width) + "'>"


def main(inputs):
    # (1) Folium map
    folium_map = folium.Map(location=[40.730610, -73.935242], zoom_start=9, tiles="OpenStreetMap")
    folium_map = folium_map._repr_html_()

    # (2) Geopandas map
    path_to_data = geopandas.datasets.get_path("nybb")
    gdf = geopandas.read_file(path_to_data)

    geopandas_plot = gdf.plot()
    geopandas_plot = plt_show(geopandas_plot.figure)

    geopandas_explore = gdf.explore()
    geopandas_explore = geopandas_explore._repr_html_()
"""
def main(inputs):
    soil_type = inputs['soil_type']
    k = inputs['hydraulic_conductivity']
    K = 'hydraulic_conductivity'

    print(soil_type)
    if soil_type == "Fine Sand":
        if k == 0:
            K = 2*10**-7
        if k == 0.5:
            K = (2*10**-4 + 2*10**-7)/2
        if k == 1:
            K = 2*10**-4
    if soil_type == "Medium Sand":
        if k == 0:
            K = 9*10**-7
        if k == 0.5:
            K = (5*10**-4 + 9*10**-7)/2
        if k == 1:
            K = 5*10**4
    if soil_type == "Coarse Sand":
        if k == 0:
            K = 9*10**-7
        if k == 0.5:
            K = (6*10**-4 + 9*10**-7)/2
        if k == 1:
            K = 6*10**-4
    if soil_type == "Gravelly Sand (Poorly Graded)":
        if k == 0:
            K = 2.55*10**-5
        if k == 0.5:
            K = (5.35*10**-4 + 2.55*10**-5)/2
        if k == 1:
            K = 5.35*10**-4
    if soil_type == "Gravelly Sand (Well Graded)":
        if k == 0:
            K = 1*10**-8
        if k == 0.5:
            K = (1*10**-6 + 1*10**-8)/2
        if k == 1:
            K = 1*10**-6
    if soil_type == "Silty Sand":
        if k == 0:
            K = 1*10**-8
        if k == 0.5:
            K = (5*10**-6 + 1*10**-8)/2
        if k == 1:
            K = 5*10**-6
    if soil_type == "Clayey Sand":
        if k == 0:
            K = 5.5*10**-9
        if k == 0.5:
            K = (5.5*10**-6 + 5.5*10**-9)/2
        if k == 1:
            K = 5.5*10**-6
    if soil_type == "Gravel":
        if k == 0:
            K =  3*10**-4
        if k == 0.5:
            K = (3*10**-4 + 3*10**-2)/2
        if k == 1:
            K = 3*10**-2
    if soil_type == "Silt (Compacted)":
        if k == 0:
            K = 7*10**-10
        if k == 0.5:
            K =  (7*10**-10 + 7*10**-8)/2
        if k == 1:
            K = 7*10**-8
    if soil_type == "Clay":
        if k == 0:
            K = 1*10**-11
        if k == 0.5:
            K = (1*10**-11 + 4.7*10**-9)/2
        if k == 1:
            K = 4.7*10**-9        
     
     #seepage velocity calculations
    i = inputs['hydraulic_gradient']
    ne = inputs['ne']
    vs = (K*i)/(ne) 
    #length calculations 
    lat1 = inputs['latitude_spill']
    lat2 = inputs['latitude_predict']
    lon1 = inputs['longtitude_spill']
    lon2 = inputs['longitude_predict']
    #def distance(lat1, lon1, lat2, lon2):
    r = 6371 # km
    p = math.pi / 180
    beta = 0.5 - math.cos((lat2-lat1)*p)/2 + math.cos(lat1*p) * math.cos(lat2*p) * (1-math.cos((lon2-lon1)*p))/2
    length = 2 * r * math.asin(math.sqrt(beta))      
    #Hydronamic Dispersion       
    D = (inputs['chemical_diffusion'])
    Dc = D*10**-9
    #Retardation Factor 
    Kd = inputs['distribution_coeff']
    ps = inputs['soil_bulk_density']
    R = 1+Kd*(ps/ne)
    #Time Calculations 
    days = inputs['days']
    daysf = float(days)
    t = daysf*float(3600)
    time = float(t)
    

    return {"K": K, "Length": length, "Time" : time, 'Dc' : Dc, 'R': R, 'vs' : vs}
