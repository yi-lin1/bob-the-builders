import folium
import geopandas
import pandas as pd
from shapely.geometry import LineString, Point, Polygon
import mecsimcalc as msc


def main(inputs):
    # Create data as Panda's DataFrame
    df = pd.DataFrame(
        {
            "Latitude": [lat1,lat2],
            "Longitude": [lon1,lon2],
        }
    )
    # Merge `Latitude` and `Longitude` columns into one column called `geometry`
    df["geometry"] = df[["Latitude", "Longitude"]].values.tolist()
    # Convert all geometries into Point shapes
    df["geometry"] = df["geometry"].apply(Point)

    # Convert DataFrame to GeoDataFrame
    gdf = geopandas.GeoDataFrame(df, )

    # Create a new GeoDataFrame with a LineString and a Polygon
    more_geometries = geopandas.GeoDataFrame(
        {
            "geometry": [
                LineString(
                    [
                        [lon1, lat1],
                        [lon2, lat2],
                    
                    ]
                ),
        

    # Add the new geometries as new rows to the existing GeoDataFrame, gdf
    gdf = pd.concat((gdf, more_geometries), axis=0)

    # Add computed values as a new column to gdf
    gdf["value"] = [1, 2, 3, 4, 5, 6, 7]  # computed values

    # Export gdf as an interactive Folium map
    m1 = gdf.explore("value", cmap="Spectral", name="My shapes", tiles=None)
    # Set `preferCanvas` to optimize performance of map
    m1.options["preferCanvas"] = True

    # Add a LayerControl with different TileLayers
    folium.TileLayer("OpenStreetMap", name="Road").add_to(m1)
    folium.TileLayer("Stamen Terrain", name="Terrain").add_to(m1)
    folium.TileLayer(
        tiles="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        attr="Esri",
        name="Satellite",
    ).add_to(m1)
    folium.LayerControl().add_to(m1)

    # Get Folium map as HTML string
    interactive_map = m1._repr_html_()

    # Export gdf as Matplotlib plot image
    m2 = gdf.plot("value", cmap="Spectral", legend=True)
    static_map = msc.print_plot(m2.figure)

    return {"interactive_map": interactive_map, "static_map": static_map}
